knife  scalr

== DESCRIPTION:

This is a Knife plugin for local installation. 

This plugin gives knife the ability to install cookbook recipes, but leave them unmanaged in future chef-client runs.

Knife Rackspace
DESCRIPTION:

This is the official Opscode Knife plugin for Scalr Cloud Servers. This plugin gives knife the ability to create, bootstrap, and manage servers on all the regions for Scalr Cloud Servers.
INSTALLATION:

Be sure you are running the latest version Chef. Versions earlier than 0.10.0 dont support plugins:

gem install chef

This plugin is distributed as a Ruby Gem. To install it, run:

gem install knife-scalr

Depending on your systems configuration, you may need to run this command with root privileges.
CONFIGURATION:

In order to communicate with the Scalr Cloud API you will have to tell Knife about your Username and API Key. The easiest way to accomplish this is to create some entries in your knife.rb file:

knife[:Scalr_api_username] = "YourScalrAPI"
knife[:Scalr_api_key] = "YourScalrAPIKey"

If your knife.rb file will be checked into a SCM system (ie readable by others) you may want to read the values from environment variables:

knife[:Scalr_api_username] = "#{ENV['Scalr_USERNAME']}"
knife[:Scalr_api_key] = "#{ENV['Scalr_API_KEY']}"

You also have the option of passing your Scalr API Username/Key into the individual knife subcommands using the -A (or --Scalr-api-username) -K (or --Scalr-api-key) command options

# provision a new 1GB Ubuntu 10.04 webserver
knife Scalr server create -I 112 -f 3 -A 'Your Scalr API username' -K "Your Scalr API Key" -r 'role[webserver]'

To select for the new OpenStack-based Scalr Open Cloud API (aka v2), you can use the --Scalr-version v2 command option. v1 is still the default, so if youre using exclusively v2 you will probably want to add the following to your knife.rb:

knife[:Scalr_version] = 'v2'

This plugin also has support for authenticating against an alternate API Auth URL. This is useful if you are a Scalr Cloud UK user, here is an example of configuring your knife.rb:

knife[:Scalr_api_auth_url] = "lon.auth.api.Scalrcloud.com"

This plugin also has support for specifying which region to create servers into:

knife[:Scalr_endpoint] = "https://dfw.servers.api.Scalrcloud.com/v2"

valid options include:

DFW_ENDPOINT = 'https://dfw.servers.api.Scalrcloud.com/v2'
ORD_ENDPOINT = 'https://ord.servers.api.Scalrcloud.com/v2'
LON_ENDPOINT = 'https://lon.servers.api.Scalrcloud.com/v2'

Additionally the following options may be set in your `knife.rb`:

    flavor

    image

    distro

    template_file

SUBCOMMANDS:

This plugin provides the following Knife subcommands. Specific command options can be found by invoking the subcommand with a --help flag
knife scalr server create

Provisions a new server in the scalr Cloud and then perform a Chef bootstrap (using the SSH protocol). The goal of the bootstrap is to get Chef installed on the target system so it can run Chef Client with a Chef Server. The main assumption is a baseline OS installation exists (provided by the provisioning). It is primarily intended for Chef Client systems that talk to a Chef server. By default the server is bootstrapped using the chef-full template. This can be overridden using the -d or --template-file command options.

If no name is provided, nodes created with the v1 API are named after their instance ID, with the v2 API they are given a random rs-XXXXXXXXX name.
knife scalr server delete

Deletes an existing server in the currently configured scalr Cloud account by the server/instance id. You can find the instance id by entering knife scalr server list. Please note - this does not delete the associated node and client objects from the Chef server unless you pass the -P or --purge command option. Using the --purge option with v2 nodes will attempt to delete the node and client by the name of the node.
knife scalr server list

Outputs a list of all servers in the currently configured scalr Cloud account. Please note - this shows all instances associated with the account, some of which may not be currently managed by the Chef server. You may need to use the --scalr-version and possibly a --scalr-endpoint options to see nodes in different scalr regions.
knife scalr flavor list

Outputs a list of all available flavors (available hardware configuration for a server) available to the currently configured scalr Cloud account. Each flavor has a unique combination of disk space, memory capacity and priority for CPU time. This data can be useful when choosing a flavor id to pass to the knife scalr server create subcommand. You may need to use the --scalr-version and possibly a --scalr-endpoint options to see nodes in different scalr regions.
knife scalr image list

Outputs a list of all available images available to the currently configured scalr Cloud account. An image is a collection of files used to create or rebuild a server. scalr provides a number of pre-built OS images by default. This data can be useful when choosing an image id to pass to the knife scalr server create subcommand. You may need to use the --scalr-version and possibly a --scalr-endpoint options to see nodes in different scalr regions.

Author:: pdam 
License::  Apache License, Version 2.0

